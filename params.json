{"name":"Embree","tagline":"Photo-Realistic Ray Tracing Kernels","body":"### What is Embree?\r\n\r\nEmbree is a collection of high-performance ray tracing kernels,\r\ndeveloped at Intel. The target users of Embree are graphics\r\napplication engineers that want to improve the performance of their \r\napplication by leveraging the optimized ray tracing kernels of Embree.\r\nThe kernels are optimized for photo-realistic rendering on the latest\r\nIntel® processors with support for SSE, AVX, and 16 wide Xeon Phi\r\nvector instructions. In version 2.0 Embree now also supports applications written with the\r\nIntel SPMD Programm Compiler (ISPC, http://ispc.github.com) which \r\nmakes it possible to write a renderer in ISPC that leverages SSE, AVX, \r\nand Xeon Phi instructions without any code change. \r\n\r\nEmbree contains algorithms optimized for incoherent workloads (e.g. \r\nMonte Carlo ray tracing algorithms) and coherent workloads (e.g. primary\r\nvisibility and hard shadow rays). For standard CPUs, the single-ray \r\ntraversal kernels in Embree provide the best performance for\r\nincoherent ray distributions and are very easy to integrate into existing\r\nrendering applications. For Xeon Phi, a renderer written in ISPC using \r\nthe optimized hybrid ray/packet traversal algorithms have shown to\r\nperform best. For coherent workloads, ISPC generally outperforms the \r\nsingle ray mode on each platform.\r\n\r\nIn addition to the ray tracing kernels, Embree provides some tutorials \r\nand an example photo-realistic rendering engine to demonstrate how the ray\r\ntracing kernels are used in practice. The Embree example\r\nrenderer is not a full featured renderer and not designed to be used\r\nfor production renderering.\r\n\r\nEmbree is released as Open Source under the Apache 2.0 license.\r\n\r\n### What's New in Embree 2.0?\r\n\r\nIn addition to everything offered by the previous version, Embree 2.0 now also boasts support for the Intel Xeon Phi coprocessor platform; support for high-performance \"packet\" kernels on SSE, AVX, and Xeon Phi; integration with both traditional C++ and with the Intel SPMD Program Compiler (ISPC); instantiation and fast BVH reconstruction; and an example photo-realistic rendering engine for both C++ and ISPC.\r\n\r\n### Downloading Embree\r\n\r\nYou can get the latest Embree version 2.0 via git the following way:\r\n\r\n```\r\n$ git clone https://github.com/embree/embree.git embree\r\n$ cd embree\r\n$ git checkout v2.0\r\n```\r\n\r\nAlternatively Embree can also be checked out with subversion:\r\n\r\n```\r\n$ svn checkout https://github.com/embree/embree.git/branches/v2.0 embree\r\n$ cd embree\r\n```\r\n\r\nA ZIP files for different versions of Embree are available here:\r\n\r\n[embree-1.1.zip](http://github.com/embree/embree/archive/v1.1.zip)\r\n\r\n[embree-2.0.zip](http://github.com/embree/embree/archive/v2.0.zip)\r\n\r\n### Compiling Embree\r\nFor compilation under Windows use the included Visual Studio 2008 solution file embree.sln to compile Embree without ISPC support and embree_ispc.sln to compile Embree with ISPC support. In the latter case you also have to install ISPC first (see below).\r\n\r\nTo compile Embree under Linux and MacOSX you need to install CMake and FreeGLUT. Optionally you should also install OpenEXR and ImageMagick to support reading more image formats with the example renderer. \r\n\r\nUnder MacOSX you can install these dependencies using MacPorts:\r\n\r\n```\r\nsudo port install cmake freeglut openexr ImageMagick\r\n```\r\n\r\nUnder Linux you can install the dependencies using yum:\r\n\r\n```\r\nsudo yum install cmake.x86_64\r\nsudo yum install freeglut.x86_64 freeglut-devel.x86_64\r\nsudo yum install libXmu.x86_64 libXi.x86_64 \r\nsudo yum install libXmu-devel.x86_64 libXi-devel.x86_64\r\nsudo yum install OpenEXR.x86_64 OpenEXR-devel.x86_64\r\nsudo yum install ImageMagick.x86_64 ImageMagick-c++.x86_64 \r\nsudo yum install ImageMagick-devel.x86_64 ImageMagick-c++-devel.x86_64 \r\n```\r\n\r\nFor compilation under Linux and MacOSX use CMake:\r\n\r\n```\r\nmkdir bin\r\ncd bin\r\ncmake ..\r\nmake\r\n```\r\n\r\n### Installing ISPC\r\nFor the ISPC projects of Embree to work you have to install\r\nISPC from <ispc.github.com>. You can download precompiled ISPC binaries or \r\ncompile ISPC from its sources. We recommend using the precompiled\r\nbinaries of ISPC v1.4.2 as we used that \r\nversion for testing:\r\n\r\n[Windows ISPC binary and examples (v1.4.2)](http://sourceforge.net/projects/ispcmirror/files/v1.4.2/ispc-v1.4.2-windows.zip/download)\r\n\r\n[Mac OS X ISPC binary and examples (v1.4.2)](http://sourceforge.net/projects/ispcmirror/files/v1.4.2/ispc-v1.4.2-osx.tar.gz/download)\r\n\r\n[Linux ISPC binary and examples (v1.4.2)](http://sourceforge.net/projects/ispcmirror/files/v1.4.2/ispc-v1.4.2-linux.tar.gz/download)\r\n\r\nAfter installing ISPC you have to set the ISPC_DIR environment variable and put the ispc executable into your path:\r\n\r\n```\r\nexport ISPC_DIR=path-to-ispc\r\nexport PATH=path-to-ispc:$PATH\r\n```\r\nBest set the ISPC_DIR variable and PATH permanently.\r\n\r\n### Using the Embree example renderer\r\nEmbree provides an example photo-realistic rendering engine. Embree also ships with a few simple test scenes, each consisting of a scene file (.xml or .obj) and an Embree command script file (.ecs). The command script file contains command line parameters that set the camera parameters, lights and render settings. The following command line will render the Cornell Box scene with 16 samples per pixel and write the resulting image to the file cornell_box.tga in the current directory:\r\n\r\n```\r\n./renderer -c ../models/cornell_box.ecs -spp 16 -o cornell_box.tga\r\n```\r\n\r\nTo interactively display the same scene, enter the following command:\r\n\r\n```\r\n./renderer -c ../models/cornell_box.ecs\r\n```\r\n\r\nPlease read the README.txt file for more information on howto compile and use Embree.\r\n\r\n### Embree Resources\r\n\r\nRead Article: [Embree: Photo-Realistic Ray Tracing Kernels](http://software.intel.com/en-us/articles/embree-highly-optimized-visibility-algorithms-for-monte-carlo-ray-tracing)\r\n\r\nEmbree 1.1 SIGGRAPH Presentation: [Embree – Photo-Realistic Ray Tracing Kernels](http://software.intel.com/sites/default/files/article/262143/embree-siggraph-2012-final.pdf)\r\n\r\nParticipate in Embree Forum Discussion: [Embree Forum](http://software.intel.com/en-us/forums/embree-photo-realistic-ray-tracing-kernels)\r\n\r\nDownload Imperial Crown of Austria Scene: [Crown0413.zip (74MB)](http://software.intel.com/sites/default/files/article/183323/crown0413.zip).\r\n\r\n![Imperial Crown of Austria](http://software.intel.com/sites/default/files/m/d/4/1/d/8/crown.png) Model courtesy [Martin Lubich](http://www.loramel.net).\r\n\r\n### Embree Support and Contact\r\nFor questions and bug reports please write us at embree_support@intel.com. For information about compiler optimizations, see our [Optimization Notice](http://software.intel.com/en-us/articles/optimization-notice#opt-en).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}